# -*- coding: utf-8 -*-
"""Crop Analysis & Prediction Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i0-RcJoM4smjpBt10VfP035-Fuo_vMeP

**Crop Analysis and Prediction :**
"""

import numpy as np
import pandas as pd

# Commented out IPython magic to ensure Python compatibility.
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)
warnings.simplefilter(action='ignore', category=UserWarning)
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

df=pd.read_csv('../content/Crop_recommendation.csv')
df.head()

df.describe()

"""**Exploratory Data Analysis**

Heatmap to check null/missing values
"""

sns.heatmap(df.isnull(),cmap="coolwarm")
plt.show()

"""**Distribution of Temperature and ph**"""

plt.figure(figsize=(12,5))
plt.subplot(1, 2, 1)
sns.distplot(df['temperature'],color="blue",bins=15,hist_kws={'alpha':0.2})
plt.subplot(1, 2, 2)
sns.distplot(df['ph'],color="green",bins=15,hist_kws={'alpha':0.2})

"""**Distribution of crop types**"""

plt.figure(figsize=(12, 6))
sns.countplot(x='label', data=df)
plt.xticks(rotation=90)
plt.title('Distribution of Crop Types')
plt.xlabel('Crop Type')
plt.ylabel('Count')
plt.show()

"""**Pair plot to visualize relationships between features**"""

plt.figure(figsize=(12, 12))
sns.pairplot(df, hue='label', diag_kind='kde', markers='o')
plt.show()

"""**Correlation Analysis**"""

# Drop the 'label' column for correlation calculation
correlation_matrix = df.drop('label', axis=1).corr()

# Correlation heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()

"""**Also, We can see ph values are critical when it comes to soil. A stability between 6 and 7 is preffered**"""

sns.boxplot(y='label',x='ph',data=df)

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score

# Features and target variable
X = df.drop('label', axis=1)
y = df['label']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model training
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluation
print(classification_report(y_test, y_pred))
print(f'Accuracy: {accuracy_score(y_test, y_pred)}')